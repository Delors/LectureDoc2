/* 
    This is LectureDoc's core CSS file. It primarily defines css properties directly 
    related to the core functionality of LectureDoc. I.e., it defines the very basics
    constraints for slides and all lecture-doc dialogs. 

    All styling information related to LectureDoc's widgets is found in ld-theme.css.

    Styling related to slides is defined in (a) user defined css file(s) or in default.css.

    _______________________________________________________________________________________________

    ________________       Any changes here, will likely break LectureDoc!        _________________

    _______________________________________________________________________________________________
*/


/*
    z-order:

    1 - main-pane
    2 - slide-number-pane

    100 - light table
    101 - light table header

    9999 - message box
*/


:root {
    /* 
        Specifies the width and height of slides. The following values are, 
        however, only for informational purposes. These value are always 
        (re)set by the JavaScript when the document is loaded; either to 
        the default values as seen below or to the values specified in the
        document.
    */
    --ld-slide-width: 1920px;
    --ld-slide-height: 1200px;
    /*
        The default zoom level.
    */
    --ld-light-table-zoom-level: 0.2;
}

/* Basic normalization. */
* {
    margin: 0;
    padding: 0;
    border: 0;
    box-sizing: border-box;
}

div {
    /* Foreground, Background */
    scrollbar-color: #999 #333;
}

::-webkit-scrollbar {
    width: 0;
    height: 0;
}

::-webkit-scrollbar-track {
    background: transparent;
}

/*  We need a fixed size for the main pane to make the content
    as a whole scalable using the scale property. The scale property is 
    updated on viewport changes using Javascript. 
    Conceptually, we would like to have some CSS like:
    
        scale: min(calc(100vh/1080px),calc(100vw/1920px)); 
    
    But such computations are (not yet?) supported.

    The actual (fixed) size, however, doesn't really matter,
    because the content is scaled anyway. Nevertheless, when 
    external content is embededd (in particular images) 
    it makes sense to have a size that resembles a "natural"
    screen resolution to avoid having the user to scale 
    everything up or down. Nevertheless, in the end  all 
    that matters is the ratio.
*/
.ld-slide {
    width: var(--ld-slide-width);
    height: var(--ld-slide-height);
    overflow: hidden;
}

/* We set the display property of the default slides to none __after___ copying.
body div.ld-slide {
    display: none;
}
*/

/*  ----------------------------------------------------------------------------


    Core styles for the main pane used to render the slide.
*/

#ld-main-pane {
    z-index: 1;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;

    /* 
        In general, we don't want accidental interaction with the slides, such 
        as selecting texts/elements. 
        
        In the Javascript code we reenable interaction with selected elements.
    */
    -webkit-user-select: none;
    user-select: none;
    cursor: default;
}

#ld-main-pane .ld-slide {
    position: absolute;
    /* 
        To only show one slide, we basically, scale all other slides to a size of 0.
        This makes them effectively invisible without _removing_ them from the DOM.

        Compared to using the display property (i.e., none <-> block) this has 
        a number of advantages: 
         - counters, e.g., for section titles work as expected.
         - the scale property can be easily animated and enables "cool" animations.
    
    */
    scale: 0; 
}

/*  ----------------------------------------------------------------------------


    Core styles for the light table view
*/

#ld-light-table-dialog {
    z-index: 100;
    opacity: 0;
    transition: opacity 500ms;
    display: flex;
    flex-direction: column;
}

#ld-light-table-header {
    flex-grow: 0;
}

#ld-light-table-footer {
    flex-grow: 0;
}


#ld-light-table-slides {
    height: 100%;
    width: 100%;
    overflow-y: scroll;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: flex-start;
    align-content: flex-start;
    scroll-snap-type: y mandatory;
}

.ld-light-table-slide-overlay {
    position: absolute;
    top: 0px;
    left: 0px;
    width: calc(var(--ld-slide-width) * var(--ld-light-table-zoom-level));
    height: calc(var(--ld-slide-height) * var(--ld-light-table-zoom-level));
}

.ld-light-table-slide-pane {
    position: relative;
    margin: 4px; /* we manipulate the margin as part of the search functionality! */
    flex-shrink: 0;
    width: calc(var(--ld-slide-width) * var(--ld-light-table-zoom-level));
    height: calc(var(--ld-slide-height) * var(--ld-light-table-zoom-level));
    overflow: hidden;
    scroll-snap-align: start;
}

.ld-light-table-slide-pane.ld-light-table-slide-pane-hide{
    margin: 0px;
    width: 0px;
    scale: 0;
    transition: width 0ms 750ms, scale 750ms ease-out; 
}


.ld-light-table-slide-scaler {
    scale: var(--ld-light-table-zoom-level);
    position: absolute;
}

#ld-light-table-slides .ld-slide {
    position: absolute;
    display: block; /* just to make sure */
}

/*  ----------------------------------------------------------------------------


    Core styles for the help dialog
*/

#ld-help-dialog {
    /*  We want to have a very subtle fade-out effect. 
        
        The value 500ms is also used in the JavaScript code to toggle the 
        display property between none and block. This is necessary to make 
        the link in the help ineffective, when the help is not shown!
    */
    opacity: 0;
    transition: opacity 500ms;
}

#ld-help {
    overflow-y: scroll;
    overflow-x: scroll;
}

/*  ----------------------------------------------------------------------------


    Core styles for the continuous view 
*/

#ld-continuous-view-pane {
    display: none;
    background-color: white;
    margin: auto;
    width: calc(var(--ld-slide-width) / 2);
    max-width: calc(var(--ld-slide-width) / 2);
    height: 100vh;
    overflow-y: scroll;
    scroll-snap-type: y mandatory;    
}

.ld-continuous-view-slide-pane {
    width: calc(var(--ld-slide-width) / 2);
    max-width: calc(var(--ld-slide-width) / 2);
    height: calc(var(--ld-slide-height) / 2);
    max-height: calc(var(--ld-slide-height) / 2);
    scroll-snap-align: start;
}

#ld-continuous-view-pane .ld-slide {
    position: absolute;
    top: 0px;
    left: 0px;
}

.ld-continuous-view-scaler {
    position: absolute;
    scale: 0.5;
}

.ld-continuous-view-slide-pane {
    height: calc(var(--ld-slide-height) / 2 + 3px);
    max-height: calc(var(--ld-slide-height) / 2 + 3px);
    position: relative;
}

.ld-continuous-view-slide-number {
    position: absolute;
}

@media print {
    .ld-continuous-view-slide-pane {
        page-break-before: always;
    }
}

#ld-message-box {
    z-index: 9999;
    position: fixed;
}



/*  ----------------------------------------------------------------------------


    Styles related to elements that are (re)arranged depending on the selected
    view.
*/

:is(#ld-main-pane, #ld-light-table-slides) aside.admonition.supplemental {
    position: absolute;
    top: 0;
    right: 0;
    margin:0;
    max-width: 75%;
    max-height: 70%;
    overflow-y: scroll;
    transform: 
        translateX(calc(100% - 18px)) 
        translateY(calc(var(--ld-slide-height) / 2 - ( 100% / 2 ) ));
}

:is(#ld-main-pane, #ld-light-table-slides) .admonition.supplemental:hover{
    transform: translateX(0%) translateY(calc(var(--ld-slide-height) / 2 - ( 100% / 2 ) ));
}

#ld-continuous-view-pane aside.admonition.supplemental {
    border-radius: 0;    
    box-shadow: none;
}


/*  ----------------------------------------------------------------------------


    Styles related to the slide number.
*/

#ld-slide-number-pane {
    display: none;
    z-index: 2;
}


/*  ----------------------------------------------------------------------------


    Styles related to default elements to make them work in the context of 
    LectureDoc2.
*/

a {
    user-select: initial;
    margin-left: auto;
    margin-right: auto;
}

