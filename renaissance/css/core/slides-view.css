/* LAYER: behavior */

:root {
    /*  Specifies the width and height of slides in pixels. This has proven
    to be very helpful when adding pictures and drawings as it enables a
    common reference frame. Besides that, only the ratio is relevant.

    These value are always set by JavaScript when the document is
    loaded; either to the default values defined in JavaScript (as shown
    next) or to the values specified in the document. 
    */
    --ld-slide-width: 1920px; /* cf. lectureDoc2.presentation.slide.width */
    --ld-slide-height: 1200px; /* cf. lectureDoc2.presentation.slide.height */
}

#ld-main-pane {
    height: 100dvh;

    display: flex;
    align-items: center;
    justify-content: center;

    /*  In general, we don't want accidental interaction with the slides, such 
        as selecting texts/elements when giving a presentation.
        
        However, in the Javascript code we reenable interaction with selected 
        elements such as links to enable inter-slide navigation. */
    -webkit-user-select: none;
    user-select: none;
    cursor: default;

    .ld-slide {
        position: absolute;
        /*  To show only one slide, we scale all other slides to a size of 0.
            This makes them effectively invisible without removing them from the 
            DOM as it would be the case when we would set display to none. 
            The latter would also make animations impossible (as of 2023).

            Compared to using the display property (i.e., none <-> block) this 
            has a number of advantages: 
            - counters, e.g., for section titles work as expected.
            - the scale property can be easily animated and enables various 
              animations.
        
            Using "display: hidden" would be an alternative that would support 
            numbering, but would make animations hard(er) (as of 2023). */
        scale: 0;
    }
}


/*  We need a fixed size for slides to make the content as a whole 
    scalable using the scale property. The scale property is set/updated 
    using Javascript. 

    Conceptually, - for the slides view - we would like to have some CSS like:
    
        scale: min(calc(100vh/1080px),calc(100vw/1920px)); 
    
    But such CSS computations are not yet supported at least until 2024.

    The actual (fixed) size, however, doesn't really matter, because the content
    is scaled anyway. Nevertheless, when external content is embededd (in 
    particular images) it makes sense to have a size that resembles a "natural"
    screen resolution to avoid having the creator to scale everything up or down
    when adding media content. 
    Nevertheless, in the end all that matters is the aspect ratio.
*/
.ld-slide {
    width: var(--ld-slide-width);
    height: var(--ld-slide-height);

    overflow: hidden;
}



/*  ----------------------------------------------------------------------------

        Styling the slide number which is adjacent to the main pane.
*/

#ld-slide-number-pane {
    /* set by core: display: none <-> table */
    display: none;

    position: fixed; 
    bottom: 0.25em; 
    right: 0.5em; 

    font-size: 24px; 

    #ld-slide-number {
        /* The following ensures that the number is always visible. */
        color: rgb(0,0,0);
        text-shadow: 1px 1px 1px white; 
    }
}

/*
.scrollable
_________________

Styling of scrollable elements. In general, it is necessary to put the content which should be scrollable in a div with the class "scrollable".  

*/
.scrollable {
    /* The user "class". */
    overflow-y: scroll;
    /* The height will be computed by JavaScript depending on the mode. */
}
